> for name, module in model.named_modules():
>         if len(list(module.children())) == 0:  
>             module.register_forward_hook(print_tensor_shape)

[Conv2d] Input shape: [torch.Size([128, 3, 224, 224])]  =>  Output shape: torch.Size([128, 64, 112, 112])
[BatchNorm2d] Input shape: [torch.Size([128, 64, 112, 112])]  =>  Output shape: torch.Size([128, 64, 112, 112])
[ReLU] Input shape: [torch.Size([128, 64, 112, 112])]  =>  Output shape: torch.Size([128, 64, 112, 112])
[MaxPool2d] Input shape: [torch.Size([128, 64, 112, 112])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[Conv2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[BatchNorm2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[ReLU] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[Conv2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[BatchNorm2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[ReLU] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[Conv2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[BatchNorm2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[ReLU] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[Conv2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[BatchNorm2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[ReLU] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 64, 56, 56])
[Conv2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[BatchNorm2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[Conv2d] Input shape: [torch.Size([128, 64, 56, 56])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[BatchNorm2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[ReLU] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[Conv2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[BatchNorm2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[ReLU] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[Conv2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[BatchNorm2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[ReLU] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[Conv2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[BatchNorm2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[ReLU] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 128, 28, 28])
[Conv2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[BatchNorm2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[Conv2d] Input shape: [torch.Size([128, 128, 28, 28])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[BatchNorm2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[ReLU] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[Conv2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[BatchNorm2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[ReLU] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[Conv2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[BatchNorm2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[ReLU] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[Conv2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[BatchNorm2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[ReLU] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 256, 14, 14])
[Conv2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[BatchNorm2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[Conv2d] Input shape: [torch.Size([128, 256, 14, 14])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[BatchNorm2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[ReLU] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[Conv2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[BatchNorm2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[ReLU] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[Conv2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[BatchNorm2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[ReLU] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[Conv2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[BatchNorm2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[ReLU] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 7, 7])
[AvgPool2d] Input shape: [torch.Size([128, 512, 7, 7])]  =>  Output shape: torch.Size([128, 512, 1, 1])
[Linear] Input shape: [torch.Size([128, 512])]  =>  Output shape: torch.Size([128, 10])